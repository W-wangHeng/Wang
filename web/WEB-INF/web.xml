<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--
    ServletContextListener说白了就是个Application监听器嘛（用来监听Application的创建与销毁）。
    ContextLoaderListener，从名字能看出来，它是用来加载Spring IOC容器的一个Application监听器。
    当Application启动的那一刻，立即加载Spring(IOC容器)。
    它读取了三个文件：spring-config.xml, spring-datasource.xml, spring-tx.xml。
    这不就跟main()启动Spring做了一样的事情嘛。
    	第二步启动和加载Mybatis。
    IOC容器存活了，还不赶紧拉Mybatis,TXManager，DataSource，SessionFactory（Mybatis把它叫做SqlSessionFactory），AOP这些组件还等什么？
    其实都已经拉过了。
    spring-config.xml：里面扫描了Service,Util，Service里面有@Service，Util里面有@Component。配置了AOP扫描器。
    spring-datasource.xml：里面配置了DataSource，SessionFactory，Dao扫描器。
    spring-tx.xml：里面配置了TXManager。以及事务扫描器。
    所以，第一步和第二步其实是合并到一步完成的，这个步骤什么都不用做。
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml,classpath:spring-datasource.xml</param-value>
    </context-param>

    <!--通过tomcat自带的default进行提前处理静态资源-->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/css/*</url-pattern>
        <url-pattern>/js/*</url-pattern>
        <url-pattern>/images/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--<load-on-startup>1</load-on-startup>-->
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>

    </filter>


    <!--登入过滤器-->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <servlet-name>dispatcher</servlet-name>

    </filter-mapping>

    <filter>
        <filter-name>loginFilter</filter-name>
        <filter-class>com.powernde.util.LoginFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>loginFilter</filter-name>
        <url-pattern>/pages/student/*</url-pattern>
        <url-pattern>/pages/teacher/*</url-pattern>
        <url-pattern>/welcome.jsp</url-pattern>
    </filter-mapping>
</web-app>